# Example: Azure Pipelines Code Coverage Integration

# Add this to your existing Azure Pipelines YAML file to enable code coverage

steps:
# ... existing build steps ...

# Run tests with code coverage
- task: DotNetCoreCLI@2
  displayName: 'Run Tests with Coverage'
  inputs:
    command: 'test'
    projects: 'XHarness.slnx'
    arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" --settings:tests/coverlet.runsettings --results-directory:$(Build.SourcesDirectory)/artifacts/coverage'
    publishTestResults: true

# Publish code coverage results
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/artifacts/coverage/**/coverage.cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/artifacts/coverage/report'
    failIfCoverageEmpty: false

# (Optional) Generate HTML report using ReportGenerator
- task: reportgenerator@5
  displayName: 'Generate Coverage Report'
  inputs:
    reports: '$(Build.SourcesDirectory)/artifacts/coverage/**/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/artifacts/coverage/report'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    assemblyfilters: '-*.Tests'

# (Optional) Publish coverage as build artifact
- task: PublishBuildArtifacts@1
  displayName: 'Publish Coverage Report'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/artifacts/coverage/report'
    ArtifactName: 'CoverageReport'
    publishLocation: 'Container'
