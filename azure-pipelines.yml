variables:
  - template: eng/common-variables.yml
  - name: Build.Repository.Clean
    value: true

# CI and PR triggers
trigger:
  batch: true
  branches:
    include:
    - main
    - xcode/*

pr:
  branches:
    include:
    - main
    - xcode/*

# Build

stages:
- stage: Build_Windows_NT
  displayName: Build Windows
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableTelemetry: true
      enablePublishBuildArtifacts: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      enablePublishBuildAssets: true
      helixRepo: dotnet/xharness

      jobs:
      - job: Windows_NT
        pool:
          ${{ if eq(variables._RunAsInternal, True) }}:
            name: NetCoreInternal-Pool
            queue: BuildPool.Server.Amd64.VS2019
          ${{ if eq(variables._RunAsPublic, True) }}:
            vmImage: windows-2019
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Debug:
                _BuildConfig: Debug
        steps:
        - ${{ if eq(variables._RunAsPublic, False) }}:
          - script: eng\common\CIBuild.cmd
              -configuration $(_BuildConfig)
              -prepareMachine
              $(_InternalBuildArgs)
              /p:Test=false
            name: Build
            displayName: Build
            condition: succeeded()

        - ${{ if eq(variables._RunAsPublic, True) }}:
          - script: eng\common\CIBuild.cmd
              -configuration $(_BuildConfig)
              -prepareMachine
              $(_InternalBuildArgs)
            name: Build
            displayName: Build and run tests
            condition: succeeded()

          - task: PublishTestResults@2
            displayName: 'Publish Unit Test Results'
            inputs:
              testResultsFormat: xUnit
              testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/**/*.xml'
              mergeTestResults: true
              searchFolder: $(system.defaultworkingdirectory)
              testRunTitle: XHarness unit tests - $(Agent.JobName)
            condition: succeededOrFailed()

        - task: ComponentGovernanceComponentDetection@0
          displayName: Component Governance scan
          inputs:
            ignoreDirectories: '$(Build.SourcesDirectory)/.packages,$(Build.SourcesDirectory)/artifacts/obj/Microsoft.DotNet.XHarness.CLI/$(_BuildConfig)/net6.0/android-tools-unzipped'

- ${{ if eq(variables._RunAsPublic, True) }}:
  - stage: Build_OSX
    displayName: Build OSX
    dependsOn:
    jobs:
    - template: /eng/common/templates/jobs/jobs.yml
      parameters:
        enableTelemetry: true
        enablePublishBuildArtifacts: true
        enableMicrobuild: true
        enablePublishUsingPipelines: true
        enablePublishBuildAssets: true
        helixRepo: dotnet/xharness

        jobs:
        - job: OSX
          pool:
            name: Hosted macOS
          strategy:
            matrix:
              Release:
                _BuildConfig: Release
              ${{ if eq(variables._RunAsPublic, True) }}:
                Debug:
                  _BuildConfig: Debug
          steps:
          - ${{ if eq(variables._RunAsPublic, False) }}:
            - script: eng/common/cibuild.sh
                --configuration $(_BuildConfig)
                --prepareMachine
                $(_InternalBuildArgs)
                /p:Test=false
              name: Build
              displayName: Build
              condition: succeeded()

          - ${{ if eq(variables._RunAsPublic, True) }}:
            - script: eng/common/cibuild.sh
                --configuration $(_BuildConfig)
                --prepareMachine
                $(_InternalBuildArgs)
              name: Build
              displayName: Build and run tests
              condition: succeeded()

            - publish: $(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/Shipping/Microsoft.DotNet.XHarness.CLI.1.0.0-ci.nupkg
              artifact: Microsoft.DotNet.XHarness.CLI.$(_BuildConfig)
              displayName: Publish XHarness CLI for Helix Testing
              condition: and(succeeded(), eq(variables['_BuildConfig'], 'Debug'))

            - task: PublishTestResults@2
              displayName: 'Publish Unit Test Results'
              inputs:
                testResultsFormat: xUnit
                testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/**/*.xml'
                mergeTestResults: true
                searchFolder: $(system.defaultworkingdirectory)
                testRunTitle: XHarness unit tests - $(Agent.JobName)
              condition: succeededOrFailed()

# E2E tests

  - template: eng/e2e-test.yml
    parameters:
      name: E2E_Android
      displayName: Android - Simulators
      testProject: $(Build.SourcesDirectory)/tests/integration-tests/Android/Android.Helix.SDK.Tests.proj

  - template: eng/e2e-test.yml
    parameters:
      name: E2E_Android_Manual_Commands
      displayName: Android - Manual Commands
      testProject: $(Build.SourcesDirectory)/tests/integration-tests/Android/Android.CLI.Commands.Tests.proj

  - template: eng/e2e-test.yml
    parameters:
      name: E2E_Apple_Simulators
      displayName: Apple - Simulators
      testProject: $(Build.SourcesDirectory)/tests/integration-tests/Apple/Simulator.Tests.proj

# TODO - Enable when running on devices is unblocked (#574)
#   - template: eng/e2e-test.yml
#     parameters:
#       name: E2E_Apple_Devices
#       displayName: Apple - Devices
#       testProject: $(Build.SourcesDirectory)/tests/integration-tests/Apple/Device.Tests.proj

# TODO - Enable when Helix SDK supports custom Apple payloads (#590)
#   - template: eng/e2e-test.yml
#     parameters:
#       name: E2E_Apple_Simulator_Commands
#       displayName: Apple - Simulator Commands
#       testProject: $(Build.SourcesDirectory)/tests/integration-tests/Apple/Simulator.Commands.Tests.proj

# TODO - Enable when running on devices is unblocked (#574) and Helix SDK supports custom Apple payloads (#590)
#   - template: eng/e2e-test.yml
#     parameters:
#       name: E2E_Apple_Device_Commands
#       displayName: Apple - Device Commands
#       testProject: $(Build.SourcesDirectory)/tests/integration-tests/Apple/Device.Commands.Tests.proj

  - template: eng/e2e-test.yml
    parameters:
      name: E2E_Apple_Simulator_Mgmt
      displayName: Apple - Simulator management
      testProject: $(Build.SourcesDirectory)/tests/integration-tests/Apple/SimulatorInstaller.Tests.proj

  - template: eng/e2e-test.yml
    parameters:
      name: E2E_WASM
      displayName: WASM
      testProject: $(Build.SourcesDirectory)/tests/integration-tests/WASM/WASM.Helix.SDK.Tests.proj

# NuGet publishing

- ${{ if eq(variables._RunAsInternal, True) }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      publishingInfraVersion: 3
      enableSymbolValidation: true
      # Reenable once this issue is resolved: https://github.com/dotnet/arcade/issues/2912
      enableSourceLinkValidation: false
      validateDependsOn:
      - Build_Windows_NT
      publishDependsOn:
      - Validate
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: false
        continueOnError: false
        params: ' -SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "Arcade"
        -TsaCodebaseName "Arcade"
        -TsaPublish $True'
