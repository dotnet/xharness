variables:
  - template: eng/common-variables.yml
  - name: Build.Repository.Clean
    value: true
  - name: _HelixType
    value: build/product
  - name: _HelixSource
    value: pr/dotnet/xharness/$(Build.SourceBranch)
  - name: _HelixTestType
    value: test/product/
  - name: _XUnitProject
    value: $(Build.SourcesDirectory)/tests/XHarness.Tests/XHarness.Tests.csproj
  - name: _XUnitTargetFramework
    value: netcoreapp3.1
  - name: _XUnitRunnerVersion
    value: 2.4.1
  - name: _DotNetCliPackageType
    value: sdk
  - name: _DotNetCliVersion
    value: 3.1.101
  - name: _HelixAccessToken
    value: ''

# CI and PR triggers
trigger:
  batch: true
  branches:
    include:
    - master

pr:
  branches:
    include:
    - master

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableTelemetry: true
      enablePublishBuildArtifacts: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      enablePublishBuildAssets: true
      helixRepo: dotnet/xharness

      jobs:
      - job: Windows_NT
        pool:
          ${{ if eq(variables._RunAsInternal, True) }}:
            name: NetCoreInternal-Pool
            queue: BuildPool.Server.Amd64.VS2019
          ${{ if eq(variables._RunAsPublic, True) }}:
            name: NetCorePublic-Pool
            queue: BuildPool.Server.Amd64.VS2019.Open
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Debug:
                _BuildConfig: Debug
        steps:
        - ${{ if eq(variables._RunAsPublic, False) }}:
          - script: eng\common\CIBuild.cmd
              -configuration $(_BuildConfig)
              -prepareMachine
              $(_InternalBuildArgs)
              /p:Test=false
            name: Build
            displayName: Build
            condition: succeeded()

        - ${{ if eq(variables._RunAsPublic, True) }}:
          - script: eng\common\CIBuild.cmd
              -configuration $(_BuildConfig)
              -prepareMachine
              $(_InternalBuildArgs)
            name: Build
            displayName: Build and run tests
            condition: succeeded()

          - task: PublishTestResults@2
            displayName: 'Publish Unit Test Results'
            inputs:
              testResultsFormat: xUnit
              testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/**/*.xml'
              mergeTestResults: true
              searchFolder: $(system.defaultworkingdirectory)
              testRunTitle: XHarness unit tests - $(Agent.JobName)
            condition: succeededOrFailed()

        - task: PublishBuildArtifacts@1
          displayName: Publish Logs to VSTS
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
            PublishLocation: Container
            ArtifactName: $(Agent.Os)_$(Agent.JobName)
          continueOnError: true
          condition: always()

      - job: OSX
        pool:
          name: Hosted macOS
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
            ${{ if eq(variables._RunAsPublic, True) }}:
              Debug:
                _BuildConfig: Debug
        steps:
        - ${{ if eq(variables._RunAsPublic, False) }}:
          - script: eng/common/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              $(_InternalBuildArgs)
              /p:Test=false
            name: Build
            displayName: Build
            condition: succeeded()

        - ${{ if eq(variables._RunAsPublic, True) }}:
          - script: eng/common/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              $(_InternalBuildArgs)
            name: Build
            displayName: Build and run tests
            condition: succeeded()

          - task: PublishTestResults@2
            displayName: 'Publish Unit Test Results'
            inputs:
              testResultsFormat: xUnit
              testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/**/*.xml'
              mergeTestResults: true
              searchFolder: $(system.defaultworkingdirectory)
              testRunTitle: XHarness unit tests - $(Agent.JobName)
            condition: succeededOrFailed()

        - task: PublishBuildArtifacts@1
          displayName: Publish Logs to VSTS
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
            PublishLocation: Container
            ArtifactName: $(Agent.Os)_$(Agent.JobName)
          continueOnError: true
          condition: always()

- ${{ if eq(variables._RunAsInternal, True) }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      enableSymbolValidation: true
      # Reenable once this issue is resolved: https://github.com/dotnet/arcade/issues/2912
      enableSourceLinkValidation: false
      publishDependsOn:
      - Validate
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: false
        continueOnError: false
        params: ' -SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "Arcade"
        -TsaCodebaseName "Arcade"
        -TsaPublish $True'

