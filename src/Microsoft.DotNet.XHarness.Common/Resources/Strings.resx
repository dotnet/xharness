<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  
  <!-- Apple Commands -->
  <data name="Apple_Test_Description" xml:space="preserve">
    <value>Installs, runs and uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst test application bundle containing TestRunner in a target device/simulator.</value>
  </data>
  <data name="Apple_Test_Usage" xml:space="preserve">
    <value>apple test --app=... --output-directory=... --target=... [OPTIONS] [-- [RUNTIME ARGUMENTS]]</value>
  </data>
  <data name="Apple_Run_Description" xml:space="preserve">
    <value>Installs, runs and uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle in a target device/simulator and tries to detect the exit code.</value>
  </data>
  <data name="Apple_Install_Description" xml:space="preserve">
    <value>Installs a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle in a target device/simulator</value>
  </data>
  <data name="Apple_Uninstall_Description" xml:space="preserve">
    <value>Uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle from a target device/simulator</value>
  </data>
  <data name="Apple_JustTest_Description" xml:space="preserve">
    <value>Runs an already installed iOS/tvOS/watchOS/xrOS/MacCatalyst test application containing a TestRunner in a target device/simulator.</value>
  </data>
  <data name="Apple_JustRun_Description" xml:space="preserve">
    <value>Runs an already installed iOS/tvOS/watchOS/xrOS/MacCatalyst test application containing a TestRunner in a target device/simulator and tries to detect the exit code.</value>
  </data>
  <data name="Apple_Device_Description" xml:space="preserve">
    <value>Finds the UDID of a device/simulator for given target</value>
  </data>
  <data name="Apple_Mlaunch_Description" xml:space="preserve">
    <value>Invoke bundled mlaunch with given arguments</value>
  </data>
  <data name="Apple_State_Description" xml:space="preserve">
    <value>Print information about the current machine, such as host machine info and device status</value>
  </data>
  
  <!-- Android Commands -->
  <data name="Android_Test_Description" xml:space="preserve">
    <value>Executes test .apk on an Android device, waits up to a given timeout, then copies files off the device and uninstalls the test app</value>
  </data>
  <data name="Android_Device_Description" xml:space="preserve">
    <value>Get ID of the device compatible with a given .apk / architecture</value>
  </data>
  <data name="Android_Install_Description" xml:space="preserve">
    <value>Install an .apk on an Android device without running it</value>
  </data>
  <data name="Android_Run_Description" xml:space="preserve">
    <value>Run tests using an already installed .apk on an Android device</value>
  </data>
  <data name="Android_Uninstall_Description" xml:space="preserve">
    <value>Uninstall an .apk from an Android device</value>
  </data>
  <data name="Android_Adb_Description" xml:space="preserve">
    <value>Invoke bundled adb with given arguments</value>
  </data>
  <data name="Android_State_Description" xml:space="preserve">
    <value>Print information about the current machine, such as host machine info and device status</value>
  </data>
  
  <!-- Android Headless Commands -->
  <data name="AndroidHeadless_Test_Description" xml:space="preserve">
    <value>Executes test executable on an Android device, waits up to a given timeout, then copies files off the device and uninstalls the test app</value>
  </data>
  <data name="AndroidHeadless_Install_Description" xml:space="preserve">
    <value>Install a test folder to an Android device without running it</value>
  </data>
  <data name="AndroidHeadless_Run_Description" xml:space="preserve">
    <value>Run tests using an already installed executable on an Android device</value>
  </data>
  <data name="AndroidHeadless_Uninstall_Description" xml:space="preserve">
    <value>Uninstall a test folder from an Android device</value>
  </data>
  
  <!-- WASM Commands -->
  <data name="Wasm_Test_Description" xml:space="preserve">
    <value>Executes tests on WASM using a selected JavaScript engine</value>
  </data>
  <data name="Wasm_TestBrowser_Description" xml:space="preserve">
    <value>Executes tests on WASM using a browser</value>
  </data>
  <data name="Wasm_WebServer_Description" xml:space="preserve">
    <value>Starts a webserver</value>
  </data>
  
  <!-- WASI Commands -->
  <data name="Wasi_Test_Description" xml:space="preserve">
    <value>Executes tests on WASI using a selected engine</value>
  </data>

  <!-- Android Messages -->
  <data name="Android_AdbNotFound" xml:space="preserve">
    <value>Unable to find adb.exe</value>
  </data>
  <data name="Android_AdbPathNotFound" xml:space="preserve">
    <value>Could not find adb.exe. Either set it in the environment via {0} or call with valid path (provided: '{1}')</value>
  </data>
  <data name="Android_OsPlatformNotSupported" xml:space="preserve">
    <value>Cannot determine OS platform being used, thus we can not select an ADB executable</value>
  </data>
  <data name="Android_ErrorGettingAdbLog" xml:space="preserve">
    <value>Error getting ADB log:{0}{1}</value>
  </data>
  <data name="Android_WroteAdbLogTo" xml:space="preserve">
    <value>Wrote current ADB log to {0}</value>
  </data>
  <data name="Android_AdbLogOutput" xml:space="preserve">
    <value>ADB log output:{0}{1}</value>
  </data>
  <data name="Android_FailedToGetApiVersion" xml:space="preserve">
    <value>Failed to get device's API version</value>
  </data>
  <data name="Android_DebugApkInstallWarning" xml:space="preserve">
    <value>Installing debug apks on a device might be rejected with INSTALL_FAILED_VERIFICATION_FAILURE. Make sure to set '{0}' to '{1}'</value>
  </data>
  <data name="Android_WaitingForDevice" xml:space="preserve">
    <value>Waiting for device to be available (max 5 minutes)</value>
  </data>
  <data name="Android_BootCompletionNotDetected" xml:space="preserve">
    <value>Did not detect boot completion variable on device; device may be in a bad state</value>
  </data>
  <data name="Android_ErrorStartingAdbServer" xml:space="preserve">
    <value>Error starting the ADB server</value>
  </data>
  <data name="Android_ErrorKillingAdbServer" xml:space="preserve">
    <value>Error killing ADB server after a failed start: {0}</value>
  </data>
  <data name="Android_FailedToStartAdbServer" xml:space="preserve">
    <value>Failed to start the ADB server</value>
  </data>
  <data name="Android_AttemptingToInstall" xml:space="preserve">
    <value>Attempting to install {0}</value>
  </data>
  <data name="Android_NoValueSupplied" xml:space="preserve">
    <value>No value supplied for {0}</value>
  </data>
  <data name="Android_FileNotFound" xml:space="preserve">
    <value>Could not find {0}</value>
  </data>
  <data name="Android_BrokenPipeRetryInstall" xml:space="preserve">
    <value>Hit broken pipe error; Will make one attempt to restart ADB server, then retry the install</value>
  </data>
  <data name="Android_PackageCacheFullReboot" xml:space="preserve">
    <value>It seems the package installation cache may be full on the device. We'll try to reboot it before trying one more time.{0}Output:{1}</value>
  </data>
  <data name="Android_InstallFailedRetry" xml:space="preserve">
    <value>Installation failed; Will make one attempt to restart ADB server and the device, then retry the install</value>
  </data>
  <data name="Android_InstallError" xml:space="preserve">
    <value>Error:{0}{1}</value>
  </data>
  <data name="Android_SuccessfullyInstalled" xml:space="preserve">
    <value>Successfully installed {0}</value>
  </data>
  <data name="Android_SuccessfullyInstalledToDirectory" xml:space="preserve">
    <value>Successfully installed {0} to {1}</value>
  </data>

  <!-- Simulator Commands -->
  <data name="Apple_Simulators_List_Description" xml:space="preserve">
    <value>Lists available simulators</value>
  </data>
  <data name="Apple_Simulators_Find_Description" xml:space="preserve">
    <value>Finds whether given simulators are installed and outputs list of missing ones (returns 0 when none missing)</value>
  </data>
  <data name="Apple_Simulators_Install_Description" xml:space="preserve">
    <value>Installs given simulators</value>
  </data>
  <data name="Apple_Simulators_Reset_Description" xml:space="preserve">
    <value>Resets given iOS/tvOS simulator (wipes it clean)</value>
  </data>
  
  <!-- Common Error Messages -->
  <data name="Error_UnknownArguments" xml:space="preserve">
    <value>Unknown arguments: {0}</value>
  </data>
  <data name="Error_RequiredArgumentMissing" xml:space="preserve">
    <value>Required argument {0} was not supplied</value>
  </data>
  <data name="Error_InvalidValue" xml:space="preserve">
    <value>Invalid value '{0}' supplied for {1}. Valid values are:{2}</value>
  </data>
  <data name="Error_MustBeInteger" xml:space="preserve">
    <value>{0} must be an integer</value>
  </data>
  <data name="Error_MustBeIntegerOrTimespan" xml:space="preserve">
    <value>{0} must be an integer - a number of seconds, or a timespan (00:30:00)</value>
  </data>
  <data name="Error_EmptyValue" xml:space="preserve">
    <value>Empty value supplied to {0}</value>
  </data>
  <data name="Error_UnexpectedFailure" xml:space="preserve">
    <value>Unexpected failure argument: {0}</value>
  </data>
  
  <!-- Help Messages -->
  <data name="Help_Usage" xml:space="preserve">
    <value>usage: {0}</value>
  </data>
  <data name="Help_CommandNotAvailableOnNonOSX" xml:space="preserve">
    <value>The '{0}' command is not available on non-OSX platforms!</value>
  </data>
  <data name="Help_NoHelpAvailableForCommand" xml:space="preserve">
    <value>No help available for command '{0}'. Allowed commands are 'apple', 'wasm', 'wasi' and 'android'</value>
  </data>
  <data name="Help_UnknownSubCommand" xml:space="preserve">
    <value>Unknown sub-command '{0}'.</value>
  </data>
  <data name="Help_AllSupportedSubCommands" xml:space="preserve">
    <value>All supported sub-commands:</value>
  </data>
  <data name="Help_RunForMoreDetails" xml:space="preserve">
    <value>Run 'xharness {0} {{command}} --help' for more details</value>
  </data>
  
  <!-- Log Messages -->
  <data name="Log_XHarnessCommandIssued" xml:space="preserve">
    <value>[{0}] XHarness command issued: {1}</value>
  </data>
  <data name="Log_XHarnessExitCode" xml:space="preserve">
    <value>XHarness exit code: {0}{1}</value>
  </data>
  
  <!-- Argument Descriptions -->
  <data name="Arg_Target_Description" xml:space="preserve">
    <value>Test target (device/simulator and OS)</value>
  </data>
  <data name="Arg_AppPath_Description" xml:space="preserve">
    <value>Path to application bundle</value>
  </data>
  <data name="Arg_OutputDirectory_Description" xml:space="preserve">
    <value>Directory to which the simulator/device output will be saved</value>
  </data>
  <data name="Arg_Timeout_Description" xml:space="preserve">
    <value>Timeout in seconds. Default is {0} seconds</value>
  </data>
  <data name="Arg_LaunchTimeout_Description" xml:space="preserve">
    <value>Timeout in seconds for the app to start. Default is {0} seconds</value>
  </data>
  <data name="Arg_DeviceName_Description" xml:space="preserve">
    <value>Name of the device/simulator to use</value>
  </data>
  <data name="Arg_Verbosity_Description" xml:space="preserve">
    <value>Logging verbosity level</value>
  </data>
  <data name="Arg_Help_Description" xml:space="preserve">
    <value>Show this message and exit</value>
  </data>
  <data name="Common_DiagnosticsDataSaveFailed" xml:space="preserve">
    <value>Failed to save diagnostics data to '{0}': {1}</value>
  </data>
  <data name="Common_NoSymbolicatorGiven" xml:space="preserve">
    <value>No symbolicator given</value>
  </data>
  <data name="Common_InvalidSymbolicatorType" xml:space="preserve">
    <value>Symbolicator '{0}' is not of WasmSymbolicatorBase type.</value>
  </data>
  <data name="Android_ErrorPullingFiles" xml:space="preserve">
    <value>Hit error (typically permissions) trying to pull {0}</value>
  </data>
  <data name="Android_ExpectedExitCodeButFileError" xml:space="preserve">
    <value>Received expected instrumentation exit code ({0}), but we hit errors pulling files from the device (see log for details.)</value>
  </data>
  <data name="Android_NonSuccessInstrumentationExitCode" xml:space="preserve">
    <value>Non-success instrumentation exit code: {0}, expected: {1}</value>
  </data>
  <data name="Android_TestExecutionSummary" xml:space="preserve">
    <value>Test execution summary:{0}{1}</value>
  </data>
  <data name="Android_ShortMessage" xml:space="preserve">
    <value>Short message:{0}{1}</value>
  </data>
  <data name="Android_InstrumentationFinishedNormally" xml:space="preserve">
    <value>Instrumentation finished normally with exit code {0}</value>
  </data>
  <data name="Android_UnparseableReturnCodeValue" xml:space="preserve">
    <value>Un-parse-able value for '{0}' : '{1}'</value>
  </data>
  <data name="Android_NoReturnCodeProvided" xml:space="preserve">
    <value>No value for '{0}' provided in instrumentation result. This may indicate a crashed test (see log)</value>
  </data>
  <data name="Android_FoundXmlResultFile" xml:space="preserve">
    <value>Found XML result file: '{0}'(key: {1})</value>
  </data>
  <data name="Android_DuplicateKey" xml:space="preserve">
    <value>Key '{0}' defined more than once</value>
  </data>
  <data name="Android_SkippingOutputLineParseFailure" xml:space="preserve">
    <value>Skipping output line due to key-value-pair parse failure: '{0}'</value>
  </data>
  <data name="Android_InstallDebugApkWarning" xml:space="preserve">
    <value>Installing debug apks on a device might be rejected with INSTALL_FAILED_VERIFICATION_FAILURE. Make sure to set '{0}' to '{1}'</value>
  </data>
  <data name="Android_AttemptingToInstallApk" xml:space="preserve">
    <value>Attempting to install {0}</value>
  </data>
  <data name="Android_InstallBrokenPipeRetry" xml:space="preserve">
    <value>Hit broken pipe error; Will make one attempt to restart ADB server, then retry the install</value>
  </data>
  <data name="Android_DeviceCacheFullWarning" xml:space="preserve">
    <value>It seems the package installation cache may be full on the device.  We'll try to reboot it before trying one more time.{0}Output:{1}</value>
  </data>
</root>