<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="zh-Hans" original="../Strings.resx">
    <body>
      <trans-unit id="AndroidHeadless_Install_Description">
        <source>Install a test folder to an Android device without running it</source>
        <target state="new">Install a test folder to an Android device without running it</target>
        <note />
      </trans-unit>
      <trans-unit id="AndroidHeadless_Run_Description">
        <source>Run tests using an already installed executable on an Android device</source>
        <target state="new">Run tests using an already installed executable on an Android device</target>
        <note />
      </trans-unit>
      <trans-unit id="AndroidHeadless_Test_Description">
        <source>Executes test executable on an Android device, waits up to a given timeout, then copies files off the device and uninstalls the test app</source>
        <target state="new">Executes test executable on an Android device, waits up to a given timeout, then copies files off the device and uninstalls the test app</target>
        <note />
      </trans-unit>
      <trans-unit id="AndroidHeadless_Uninstall_Description">
        <source>Uninstall a test folder from an Android device</source>
        <target state="new">Uninstall a test folder from an Android device</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_AdbLogOutput">
        <source>ADB log output:{0}{1}</source>
        <target state="new">ADB log output:{0}{1}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_AdbNotFound">
        <source>Unable to find adb.exe</source>
        <target state="new">Unable to find adb.exe</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_AdbPathNotFound">
        <source>Could not find adb.exe. Either set it in the environment via {0} or call with valid path (provided: '{1}')</source>
        <target state="new">Could not find adb.exe. Either set it in the environment via {0} or call with valid path (provided: '{1}')</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_Adb_Description">
        <source>Invoke bundled adb with given arguments</source>
        <target state="new">Invoke bundled adb with given arguments</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_AttemptingToInstall">
        <source>Attempting to install {0}</source>
        <target state="new">Attempting to install {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_BootCompletionNotDetected">
        <source>Did not detect boot completion variable on device; device may be in a bad state</source>
        <target state="new">Did not detect boot completion variable on device; device may be in a bad state</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_BrokenPipeRetryInstall">
        <source>Hit broken pipe error; Will make one attempt to restart ADB server, then retry the install</source>
        <target state="new">Hit broken pipe error; Will make one attempt to restart ADB server, then retry the install</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_DebugApkInstallWarning">
        <source>Installing debug apks on a device might be rejected with INSTALL_FAILED_VERIFICATION_FAILURE. Make sure to set '{0}' to '{1}'</source>
        <target state="new">Installing debug apks on a device might be rejected with INSTALL_FAILED_VERIFICATION_FAILURE. Make sure to set '{0}' to '{1}'</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_Device_Description">
        <source>Get ID of the device compatible with a given .apk / architecture</source>
        <target state="new">Get ID of the device compatible with a given .apk / architecture</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_ErrorGettingAdbLog">
        <source>Error getting ADB log:{0}{1}</source>
        <target state="new">Error getting ADB log:{0}{1}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_ErrorKillingAdbServer">
        <source>Error killing ADB server after a failed start: {0}</source>
        <target state="new">Error killing ADB server after a failed start: {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_ErrorStartingAdbServer">
        <source>Error starting the ADB server</source>
        <target state="new">Error starting the ADB server</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_FailedToGetApiVersion">
        <source>Failed to get device's API version</source>
        <target state="new">Failed to get device's API version</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_FailedToStartAdbServer">
        <source>Failed to start the ADB server</source>
        <target state="new">Failed to start the ADB server</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_FileNotFound">
        <source>Could not find {0}</source>
        <target state="new">Could not find {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_InstallError">
        <source>Error:{0}{1}</source>
        <target state="new">Error:{0}{1}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_InstallFailedRetry">
        <source>Installation failed; Will make one attempt to restart ADB server and the device, then retry the install</source>
        <target state="new">Installation failed; Will make one attempt to restart ADB server and the device, then retry the install</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_Install_Description">
        <source>Install an .apk on an Android device without running it</source>
        <target state="new">Install an .apk on an Android device without running it</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_NoValueSupplied">
        <source>No value supplied for {0}</source>
        <target state="new">No value supplied for {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_OsPlatformNotSupported">
        <source>Cannot determine OS platform being used, thus we can not select an ADB executable</source>
        <target state="new">Cannot determine OS platform being used, thus we can not select an ADB executable</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_PackageCacheFullReboot">
        <source>It seems the package installation cache may be full on the device. We'll try to reboot it before trying one more time.{0}Output:{1}</source>
        <target state="new">It seems the package installation cache may be full on the device. We'll try to reboot it before trying one more time.{0}Output:{1}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_Run_Description">
        <source>Run tests using an already installed .apk on an Android device</source>
        <target state="new">Run tests using an already installed .apk on an Android device</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_State_Description">
        <source>Print information about the current machine, such as host machine info and device status</source>
        <target state="new">Print information about the current machine, such as host machine info and device status</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_SuccessfullyInstalled">
        <source>Successfully installed {0}</source>
        <target state="new">Successfully installed {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_SuccessfullyInstalledToDirectory">
        <source>Successfully installed {0} to {1}</source>
        <target state="new">Successfully installed {0} to {1}</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_Test_Description">
        <source>Executes test .apk on an Android device, waits up to a given timeout, then copies files off the device and uninstalls the test app</source>
        <target state="new">Executes test .apk on an Android device, waits up to a given timeout, then copies files off the device and uninstalls the test app</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_Uninstall_Description">
        <source>Uninstall an .apk from an Android device</source>
        <target state="new">Uninstall an .apk from an Android device</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_WaitingForDevice">
        <source>Waiting for device to be available (max 5 minutes)</source>
        <target state="new">Waiting for device to be available (max 5 minutes)</target>
        <note />
      </trans-unit>
      <trans-unit id="Android_WroteAdbLogTo">
        <source>Wrote current ADB log to {0}</source>
        <target state="new">Wrote current ADB log to {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Device_Description">
        <source>Finds the UDID of a device/simulator for given target</source>
        <target state="new">Finds the UDID of a device/simulator for given target</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Install_Description">
        <source>Installs a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle in a target device/simulator</source>
        <target state="new">Installs a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle in a target device/simulator</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_JustRun_Description">
        <source>Runs an already installed iOS/tvOS/watchOS/xrOS/MacCatalyst test application containing a TestRunner in a target device/simulator and tries to detect the exit code.</source>
        <target state="new">Runs an already installed iOS/tvOS/watchOS/xrOS/MacCatalyst test application containing a TestRunner in a target device/simulator and tries to detect the exit code.</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_JustTest_Description">
        <source>Runs an already installed iOS/tvOS/watchOS/xrOS/MacCatalyst test application containing a TestRunner in a target device/simulator.</source>
        <target state="new">Runs an already installed iOS/tvOS/watchOS/xrOS/MacCatalyst test application containing a TestRunner in a target device/simulator.</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Mlaunch_Description">
        <source>Invoke bundled mlaunch with given arguments</source>
        <target state="new">Invoke bundled mlaunch with given arguments</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Run_Description">
        <source>Installs, runs and uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle in a target device/simulator and tries to detect the exit code.</source>
        <target state="new">Installs, runs and uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle in a target device/simulator and tries to detect the exit code.</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Simulators_Find_Description">
        <source>Finds whether given simulators are installed and outputs list of missing ones (returns 0 when none missing)</source>
        <target state="new">Finds whether given simulators are installed and outputs list of missing ones (returns 0 when none missing)</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Simulators_Install_Description">
        <source>Installs given simulators</source>
        <target state="new">Installs given simulators</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Simulators_List_Description">
        <source>Lists available simulators</source>
        <target state="new">Lists available simulators</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Simulators_Reset_Description">
        <source>Resets given iOS/tvOS simulator (wipes it clean)</source>
        <target state="new">Resets given iOS/tvOS simulator (wipes it clean)</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_State_Description">
        <source>Print information about the current machine, such as host machine info and device status</source>
        <target state="new">Print information about the current machine, such as host machine info and device status</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Test_Description">
        <source>Installs, runs and uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst test application bundle containing TestRunner in a target device/simulator.</source>
        <target state="new">Installs, runs and uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst test application bundle containing TestRunner in a target device/simulator.</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Test_Usage">
        <source>apple test --app=... --output-directory=... --target=... [OPTIONS] [-- [RUNTIME ARGUMENTS]]</source>
        <target state="new">apple test --app=... --output-directory=... --target=... [OPTIONS] [-- [RUNTIME ARGUMENTS]]</target>
        <note />
      </trans-unit>
      <trans-unit id="Apple_Uninstall_Description">
        <source>Uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle from a target device/simulator</source>
        <target state="new">Uninstalls a given iOS/tvOS/watchOS/xrOS/MacCatalyst application bundle from a target device/simulator</target>
        <note />
      </trans-unit>
      <trans-unit id="Arg_AppPath_Description">
        <source>Path to application bundle</source>
        <target state="new">Path to application bundle</target>
        <note />
      </trans-unit>
      <trans-unit id="Arg_DeviceName_Description">
        <source>Name of the device/simulator to use</source>
        <target state="new">Name of the device/simulator to use</target>
        <note />
      </trans-unit>
      <trans-unit id="Arg_Help_Description">
        <source>Show this message and exit</source>
        <target state="new">Show this message and exit</target>
        <note />
      </trans-unit>
      <trans-unit id="Arg_LaunchTimeout_Description">
        <source>Timeout in seconds for the app to start. Default is {0} seconds</source>
        <target state="new">Timeout in seconds for the app to start. Default is {0} seconds</target>
        <note />
      </trans-unit>
      <trans-unit id="Arg_OutputDirectory_Description">
        <source>Directory to which the simulator/device output will be saved</source>
        <target state="new">Directory to which the simulator/device output will be saved</target>
        <note />
      </trans-unit>
      <trans-unit id="Arg_Target_Description">
        <source>Test target (device/simulator and OS)</source>
        <target state="new">Test target (device/simulator and OS)</target>
        <note />
      </trans-unit>
      <trans-unit id="Arg_Timeout_Description">
        <source>Timeout in seconds. Default is {0} seconds</source>
        <target state="new">Timeout in seconds. Default is {0} seconds</target>
        <note />
      </trans-unit>
      <trans-unit id="Arg_Verbosity_Description">
        <source>Logging verbosity level</source>
        <target state="new">Logging verbosity level</target>
        <note />
      </trans-unit>
      <trans-unit id="Error_EmptyValue">
        <source>Empty value supplied to {0}</source>
        <target state="new">Empty value supplied to {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Error_InvalidValue">
        <source>Invalid value '{0}' supplied for {1}. Valid values are:{2}</source>
        <target state="new">Invalid value '{0}' supplied for {1}. Valid values are:{2}</target>
        <note />
      </trans-unit>
      <trans-unit id="Error_MustBeInteger">
        <source>{0} must be an integer</source>
        <target state="new">{0} must be an integer</target>
        <note />
      </trans-unit>
      <trans-unit id="Error_MustBeIntegerOrTimespan">
        <source>{0} must be an integer - a number of seconds, or a timespan (00:30:00)</source>
        <target state="new">{0} must be an integer - a number of seconds, or a timespan (00:30:00)</target>
        <note />
      </trans-unit>
      <trans-unit id="Error_RequiredArgumentMissing">
        <source>Required argument {0} was not supplied</source>
        <target state="new">Required argument {0} was not supplied</target>
        <note />
      </trans-unit>
      <trans-unit id="Error_UnexpectedFailure">
        <source>Unexpected failure argument: {0}</source>
        <target state="new">Unexpected failure argument: {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Error_UnknownArguments">
        <source>Unknown arguments: {0}</source>
        <target state="new">Unknown arguments: {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Help_AllSupportedSubCommands">
        <source>All supported sub-commands:</source>
        <target state="new">All supported sub-commands:</target>
        <note />
      </trans-unit>
      <trans-unit id="Help_CommandNotAvailableOnNonOSX">
        <source>The '{0}' command is not available on non-OSX platforms!</source>
        <target state="new">The '{0}' command is not available on non-OSX platforms!</target>
        <note />
      </trans-unit>
      <trans-unit id="Help_NoHelpAvailableForCommand">
        <source>No help available for command '{0}'. Allowed commands are 'apple', 'wasm', 'wasi' and 'android'</source>
        <target state="new">No help available for command '{0}'. Allowed commands are 'apple', 'wasm', 'wasi' and 'android'</target>
        <note />
      </trans-unit>
      <trans-unit id="Help_RunForMoreDetails">
        <source>Run 'xharness {0} {{command}} --help' for more details</source>
        <target state="new">Run 'xharness {0} {{command}} --help' for more details</target>
        <note />
      </trans-unit>
      <trans-unit id="Help_UnknownSubCommand">
        <source>Unknown sub-command '{0}'.</source>
        <target state="new">Unknown sub-command '{0}'.</target>
        <note />
      </trans-unit>
      <trans-unit id="Help_Usage">
        <source>usage: {0}</source>
        <target state="new">usage: {0}</target>
        <note />
      </trans-unit>
      <trans-unit id="Log_XHarnessCommandIssued">
        <source>[{0}] XHarness command issued: {1}</source>
        <target state="new">[{0}] XHarness command issued: {1}</target>
        <note />
      </trans-unit>
      <trans-unit id="Log_XHarnessExitCode">
        <source>XHarness exit code: {0}{1}</source>
        <target state="new">XHarness exit code: {0}{1}</target>
        <note />
      </trans-unit>
      <trans-unit id="Wasi_Test_Description">
        <source>Executes tests on WASI using a selected engine</source>
        <target state="new">Executes tests on WASI using a selected engine</target>
        <note />
      </trans-unit>
      <trans-unit id="Wasm_TestBrowser_Description">
        <source>Executes tests on WASM using a browser</source>
        <target state="new">Executes tests on WASM using a browser</target>
        <note />
      </trans-unit>
      <trans-unit id="Wasm_Test_Description">
        <source>Executes tests on WASM using a selected JavaScript engine</source>
        <target state="new">Executes tests on WASM using a selected JavaScript engine</target>
        <note />
      </trans-unit>
      <trans-unit id="Wasm_WebServer_Description">
        <source>Starts a webserver</source>
        <target state="new">Starts a webserver</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>